//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// B_fun.cpp
//
// Code generation for function 'B_fun'
//

// Include files
#include "B_fun.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void B_fun(const double q[3], double, const double l[3], const double rho[3],
           double B[9])
{
  double B_tmp;
  double b_B_tmp;
  double c_B_tmp;
  double d;
  double d1;
  double d2;
  double d3;
  double d4;
  double t10;
  double t11;
  double t117;
  double t12;
  double t13;
  double t131;
  double t14;
  double t15;
  double t16;
  double t161;
  double t162;
  double t165;
  double t17;
  double t18;
  double t19;
  double t2;
  double t20;
  double t21;
  double t217;
  double t22;
  double t23;
  double t26;
  double t260;
  double t268;
  double t27;
  double t28;
  double t29;
  double t3;
  double t30;
  double t32;
  double t33;
  double t34;
  double t35;
  double t36;
  double t37;
  double t38;
  double t39;
  double t4;
  double t40;
  double t41;
  double t43;
  double t44;
  double t45;
  double t45_tmp;
  double t46;
  double t46_tmp;
  double t47;
  double t49;
  double t5;
  double t50;
  double t50_tmp;
  double t53;
  double t58;
  double t58_tmp;
  double t59;
  double t6;
  double t60;
  double t64;
  double t65;
  double t66;
  double t66_tmp;
  double t67;
  double t67_tmp;
  double t7;
  double t8;
  double t9;
  double t90;
  boolean_T t25;
  // B_FUN
  //     B = B_FUN(IN1,ALPHA,IN3,IN4)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     16-Apr-2021 16:08:38
  t2 = std::cos(q[0]);
  t3 = std::cos(q[1]);
  t4 = std::cos(q[2]);
  t5 = std::sin(q[0]);
  t6 = std::sin(q[1]);
  t7 = std::sin(q[2]);
  t8 = q[0] + q[1];
  t9 = q[1] + q[2];
  t10 = l[0] * l[0];
  t11 = rt_powd_snf(l[0], 3.0);
  t12 = l[1] * l[1];
  t13 = rt_powd_snf(l[1], 3.0);
  t14 = l[2] * l[2];
  t15 = rt_powd_snf(l[2], 3.0);
  t16 = q[0] * q[0];
  t17 = rt_powd_snf(q[0], 3.0);
  t18 = q[1] * q[1];
  t20 = rt_powd_snf(q[1], 3.0);
  t21 = q[2] * q[2];
  t23 = rt_powd_snf(q[2], 3.0);
  t25 = (q[2] != 0.0);
  t32 = 1.0 / l[1];
  t33 = 1.0 / l[2];
  t35 = 1.0 / q[1];
  t44 = q[0] * l[1] * 1000.0;
  t45_tmp = q[0] * l[2];
  t45 = t45_tmp * 1000.0;
  t46_tmp = q[1] * l[2];
  t46 = t46_tmp * 1000.0;
  t19 = t16 * t16;
  t22 = t18 * t18;
  t26 = std::cos(t8);
  t27 = std::cos(t9);
  t28 = q[2] + t8;
  t29 = std::sin(t8);
  t30 = std::sin(t9);
  t34 = 1.0 / t16;
  t36 = 1.0 / t18;
  t39 = 1.0 / t23;
  t40 = 1.0 / (t21 * t21);
  t43 = t18 * t21;
  t47 = q[1] * t16 * t21;
  t49 = q[2] + t46;
  t50_tmp = l[1] * t21;
  t50 = t50_tmp * 2000.0;
  t53 = q[0] * (1.0 / l[0]) / 1000.0;
  t8 = q[1] * t32 / 1000.0;
  t9 = q[2] * t33 / 1000.0;
  t58_tmp = l[1] * l[2];
  t58 = t58_tmp * t21 * 2.0E+6;
  t66_tmp = l[0] * l[1];
  t66 = t66_tmp * rho[1] * t18 * t23 * 2000.0;
  t67_tmp = t66_tmp * rho[2];
  t67 = t67_tmp * t18 * t23 * 2000.0;
  t90 = t4 * t14 * t18 * 2.0E+6;
  t117 = t66_tmp * l[2] * rho[2] * t18 * t23 * 2.0E+6;
  t131 = l[0] * rho[1] * t12 * t18 * t23 * 2.0E+6;
  t37 = 1.0 / t19;
  t38 = 1.0 / t22;
  t41 = std::cos(t28);
  t59 = std::sin(t8);
  t60 = std::sin(t9);
  t64 = std::cos(t8);
  t65 = std::cos(t9);
  t32 = t32 * (q[1] + t44) / 1000.0;
  t8 = t33 * t49 / 1000.0;
  t161 = std::cos(t32);
  t162 = std::cos(t8);
  t165 = std::sin(t8);
  t9 = t33 * (t45 + t49) / 1000.0;
  t217 = std::cos(t9);
  if (t25) {
    t260 = l[2] * rho[2] * t36 * t40 *
           (((((((((((((((((((((t43 + -t50) + t3 * t50) + t58) +
                             -(l[1] * l[2] * q[2] * t7 * 4.0E+6)) +
                            l[1] * l[2] * q[2] * t30 * 4.0E+6) +
                           t4 * t58) +
                          -(l[1] * l[2] * q[1] * q[2] * t4 * 4.0E+6)) +
                         t90) +
                        l[1] * l[2] * t3 * t21 * -2.0E+6) +
                       q[2] * t7 * t14 * t18 * 2.0E+6) +
                      l[1] * l[2] * q[1] * t7 * t21 * -2.0E+6) +
                     l[1] * l[2] * t21 * t27 * -2.0E+6) +
                    q[1] * t50 * t60) +
                   l[1] * t21 * t65 * -2000.0) +
                  -(l[2] * q[2] * t18 * t60 * 2000.0)) +
                 l[1] * l[2] * q[2] * t60 * 4.0E+6) +
                l[1] * l[2] * q[1] * q[2] * t65 * 4.0E+6) +
               -(t14 * t18 * t65 * 2.0E+6)) +
              t50 * t162) +
             -(l[1] * l[2] * q[2] * t165 * 4.0E+6)) -
            t14 * t43 * 1.0E+6) *
           -5.0E-7;
  } else {
    t260 = rtNaN;
  }
  d = l[1] * rho[1];
  d1 = l[2] * rho[2];
  d2 = t66_tmp * q[0];
  t8 = d2 * rho[2];
  d3 = rho[2] * t12;
  d4 = l[0] * l[2];
  if (q[1] != 0.0) {
        t268 = t34 * t38 * t39 * ((((((((((((((((((((((((((((((((((((((((((((((((((((d * t16 * t18 * t23 + t2 * t66) + t2 * t67) + t3 * t67) + q[0] * t6 * t117) + t3 * t131) + t26 * t117) + t3 * (d1 * t12 * t16 * t18 * t23 * 2.0E+6)) + t67_tmp * t6 * t20 * t23 * 2000.0) + q[2] * rho[2] * t14 * t16 * t22 * 4000.0) + t8 * t3 * t20 * t23 * 2000.0) + d3 * t16 * t18 * t23 * 2000.0) + t8 * t6 * t18 * t23 * -2000.0) + t117) + d4 * rho[2] * t21 * t22 * t29 * 2000.0) + t131) + t67_tmp * t18 * t23 * t26 * -2000.0) + t58_tmp * rho[2] * t6 * t16 * t43 * 2000.0) + rho[1] * t3 * t13 * t16 * t23 * 2.0E+6) + rho[2] * t7 * t15 * t16 * t22 * 4.0E+6) + t66_tmp * l[2] * rho[2] * t2 * t18 * t23 * -2.0E+6) + t66_tmp * l[2] * rho[2] * t3 * t18 * t23 * -2.0E+6) + l[0] * rho[2] * t6 * t14 * t21 * t22 * 2.0E+6) + q[1] * rho[1] * t6 * t13 * t16 * t23 * 2.0E+6) + rho[2] * t3 * t12 * t16 * t18 * t23 * -2000.0) + l[0] * q[2] * rho[2] * t14 * t22 * t27 * 2.0E+6) + l[0] * q[1] * rho[1] * t12 * t23 * t29 * 4.0E+6) + l[0] * l[1] * l[2] * rho[2] * t20 * t23 * t29 * 2.0E+6) + l[1] * rho[2] * t14 * t16 * t20 * t21 * 4.0E+6) + l[0] * rho[1] * t2 * t12 * t18 * t23 * -2.0E+6) + l[0] * q[0] * rho[2] * t3 * t14 * t21 * t22 * 2.0E+6) + l[1] * q[2] * rho[2] * t16 * t90) + l[0] * q[0] * rho[1] * t6 * t12 * t18 * t23 * -2.0E+6) + l[0] * rho[1] * t12 * t18 * t23 * t26 * -2.0E+6) + l[1] * q[2] * rho[2] * t14 * t16 * t20 * t30 * 2.0E+6) + t66 * t161) + q[0] * t59 * t66) - l[0] * l[1] * t18 * t23 * rho[1] * 2000.0) - l[0] * l[1] * t18 * t23 * rho[2] * 2000.0) - t15 * t16 * t22 * q[2] * rho[2] * 4.0E+6) - t13 * t16 * t18 * t23 * rho[1] * 1.0E+6) + -(rho[2] * t15 * t16 * t22 * t60 * 4.0E+6)) + -(rho[1] * t13 * t16 * t23 * t64 * 2.0E+6)) - l[0] * l[2] * t22 * t21 * rho[2] * t6 * 2000.0) - l[1] * l[2] * t16 * t20 * t21 * rho[2] * 4000.0) - l[0] * l[1] * t20 * t23 * rho[2] * t29 * 2000.0) + l[0] * l[1] * rho[1] * t18 * t23 * t64 * -2000.0) - l[0] * t12 * q[1] * t23 * rho[1] * t6 * 4.0E+6) - l[0] * t14 * t22 * q[2] * rho[2] * t41 * 2.0E+6) + l[0] * q[1] * rho[1] * t12 * t23 * t59 * 4.0E+6) + -(l[0] * q[1] * rho[1] * t12 * t23 * std::sin(t32) * 4.0E+6)) + -(l[0] * q[2] * rho[2] * t14 * t22 * t162 * 2.0E+6)) + (((((((((((((((((((t12 * l[2] * t16 * t18 * t23 * rho[2] * -2.0E+6 - l[0] * t14 * t22 * t21 * rho[2] * t29 * 2.0E+6) + -(q[1] * rho[1] * t12 * t16 * t23 * t59 * 2000.0)) + l[0] * q[2] * rho[2] * t14 * t22 * t217 * 2.0E+6) + l[1] * t14 * t16 * rho[2] * t6 * -2.0E+6 * t43) - l[0] * l[1] * l[2] * t20 * t23 * rho[2] * t6 * 2.0E+6) - l[0] * l[2] * q[0] * t22 * t21 * rho[2] * t3 * 2000.0) + l[1] * l[2] * t16 * t20 * t21 * rho[2] * t3 * 2000.0) - l[0] * t12 * q[0] * q[1] * t23 * rho[1] * t3 * 4.0E+6) - l[0] * t14 * q[0] * t22 * q[2] * rho[2] * t30 * 2.0E+6) + l[0] * q[0] * q[1] * rho[1] * t12 * t23 * t64 * 4.0E+6) + l[0] * q[0] * q[2] * rho[2] * t14 * t22 * t165 * 2.0E+6) - l[1] * t14 * t16 * t20 * q[2] * rho[2] * t7 * 4.0E+6) - l[1] * t14 * t16 * t18 * q[2] * rho[2] * t27 * 2.0E+6) + l[1] * q[2] * rho[2] * t14 * t16 * t20 * t60 * 4.0E+6) + l[1] * q[2] * rho[2] * t14 * t16 * t18 * t65 * -2.0E+6) + l[1] * q[2] * rho[2] * t14 * t16 * t18 * t162 * 2.0E+6) + -(l[1] * q[2] * rho[2] * t14 * t16 * t20 * t165 * 2.0E+6)) - l[1] * t14 * t16 * t20 * t21 * rho[2] * t3 * 2.0E+6) - l[0] * l[1] * l[2] * q[0] * t20 * t23 * rho[2] * t3 * 2.0E+6)) * -5.0E-7;
  } else {
    t268 = rtNaN;
  }
  if (t25) {
    t67 =
        l[2] * rho[2] * t34 * t35 * t40 *
        (((((((((((((((((((((((((((((((((t47 + l[0] * q[0] * q[1] * t6 * t21 *
                                                   2000.0) +
                                        l[0] * q[1] * t21 * t26 * 2000.0) +
                                       l[1] * t6 * t16 * t21 * -2000.0) +
                                      l[0] * l[2] * q[1] * t3 * t21 * 2.0E+6) +
                                     l[0] * l[2] * q[1] * q[2] * std::sin(t28) *
                                         4.0E+6) +
                                    q[1] * t4 * t14 * t16 * 2.0E+6) +
                                   -(l[0] * l[2] * q[1] * q[2] * t30 *
                                     4.0E+6)) +
                                  l[0] * l[2] * q[1] * t21 * t27 * 2.0E+6) +
                                 l[1] * l[2] * q[2] * t16 * t27 * 4.0E+6) +
                                -(l[0] * l[2] * q[0] * q[1] * q[2] * t27 *
                                  4.0E+6)) +
                               t6 * t16 * t58) +
                              q[1] * q[2] * t7 * t14 * t16 * 2.0E+6) +
                             -(l[0] * l[2] * q[1] * t21 * t26 * 2.0E+6)) +
                            l[1] * l[2] * t7 * t16 * t21 * -2.0E+6) +
                           t16 * t30 * t58) +
                          -(l[0] * l[2] * q[1] * t21 * t41 * 2.0E+6)) +
                         -(l[0] * l[2] * q[0] * q[1] * t21 * t30 * 2.0E+6)) +
                        t16 * t50 * t60) +
                       -(q[1] * l[2] * q[2] * t16 * t60 * 2000.0)) +
                      l[1] * l[2] * q[2] * t16 * t65 * 4.0E+6) +
                     -(q[1] * t14 * t16 * t65 * 2.0E+6)) +
                    l[0] * q[0] * q[1] * t21 * t165 * 2000.0) +
                   -(l[0] * q[1] * t21 * t162 * 2000.0)) +
                  l[0] * l[2] * q[1] * q[2] * t165 * 4.0E+6) +
                 l[1] * t16 * t21 * t165 * -2000.0) +
                l[0] * l[2] * q[0] * q[1] * q[2] * t162 * 4.0E+6) +
               -(l[1] * l[2] * q[2] * t16 * t162 * 4.0E+6)) +
              l[0] * q[1] * t21 * t217 * 2000.0) +
             -(l[0] * l[2] * q[1] * q[2] * std::sin(t9) * 4.0E+6)) -
            t14 * t47 * 1.0E+6) -
           l[0] * q[1] * t3 * t21 * 2000.0) -
          l[1] * l[2] * q[2] * t4 * t16 * 4.0E+6) -
         l[0] * l[2] * q[0] * q[1] * t6 * t21 * 2.0E+6) *
        -5.0E-7;
  } else {
    t67 = rtNaN;
  }
  t90 = q[0] * t10;
  t117 = l[2] * t10;
  t131 = l[0] * q[2] * t14;
  t40 = t131 * t16;
  t131 *= t17;
  t47 = q[0] * t5;
  t50 = t66_tmp * q[1];
  t58 = l[0] * q[0];
  t22 = l[0] * q[1];
  t28 = t22 * t6;
  B_tmp = t22 * t21;
  b_B_tmp = q[1] * t14 * t16;
  c_B_tmp = d4 * q[1];
  t8 = t46_tmp * q[2];
  t9 = t58 * q[1];
  t32 = q[1] * q[2];
  t49 = q[1] * t12;
  t33 = l[1] * q[1];
  t43 = q[2] * t14;
  t66 = q[2] * t15;
  t67_tmp = t7 * t15;
  B[0] = (((1.0 / rt_powd_snf(q[0], 5.0) * rho[0] *
                (((((((t17 + t90 * 6.0E+6) - q[0] * t11 * 6.0E+9) +
                     t5 * t11 * 1.2E+10) -
                    t11 * t17 * 1.0E+9) -
                   t11 * std::sin(t53) * 1.2E+10) +
                  t90 * std::cos(t53) * 6.0E+6) -
                 q[0] * t2 * t11 * 6.0E+9) *
                -3.3333333333333332E-10 -
            rho[2] * t37 * t39 *
                (((((((((((((((((((((((t10 * t23 * 2.0 - t117 * t23 * 2000.0) +
                                      t43 * t19 * 2.0) -
                                     t66 * t19 * 2000.0) -
                                    t2 * t10 * t23 * 2.0) +
                                   t67_tmp * t19 * 2000.0) +
                                  t10 * t16 * t23) -
                                 t15 * t19 * t60 * 2000.0) +
                                l[2] * t2 * t10 * t23 * 2000.0) -
                               t117 * t16 * t23 * 1000.0) -
                              t47 * t10 * t23 * 2.0) -
                             d4 * t3 * t17 * t21 * 2.0) -
                            d4 * t6 * t16 * t21 * 2.0) +
                           d4 * t16 * t21 * t29 * 2.0) +
                          t45_tmp * t5 * t10 * t23 * 2000.0) +
                         t40 * t27 * 2000.0) -
                        t131 * t30 * 2000.0) -
                       t40 * t41 * 2000.0) -
                      t40 * t162 * 2000.0) +
                     t131 * t165 * 2000.0) +
                    t40 * t217 * 2000.0) +
                   l[0] * t3 * t14 * t17 * t21 * 2000.0) +
                  l[0] * t6 * t14 * t16 * t21 * 2000.0) +
                 l[0] * t14 * t16 * t21 * t29 * -2000.0) /
                1000.0) -
           rho[1] * t10 * t37 * (l[1] * 1000.0 - 1.0) *
               (((t2 * 2.0 - t16) + t47 * 2.0) - 2.0) / 1000.0) +
          d * t34 *
              (((((((((((((t58 * t18 - t33 * t16) - l[0] * t5 * t18) +
                         t49 * t16 * 1000.0) -
                        t6 * t12 * t16 * 1000.0) +
                       t12 * t16 * t59 * 1000.0) -
                      t50 * t3 * 1000.0) -
                     d2 * t18 * 1000.0) +
                    t50 * t26 * 1000.0) +
                   t50 * t64 * 1000.0) -
                  t50 * t161 * 1000.0) +
                 t66_tmp * t5 * t18 * 1000.0) +
                t28 * t44) -
               d2 * q[1] * t59 * 1000.0) /
              (t20 * 500.0)) +
         l[1] * rho[2] * t34 * t36 *
             (((((((((((((((((((((l[1] * t16 * t21 -
                                  t58_tmp * t16 * t21 * 1000.0) -
                                 t8 * t16) -
                                t9 * t21) +
                               t22 * t5 * t21) +
                              t28 * t21) -
                             B_tmp * t29) +
                            B_tmp * t45) -
                           l[1] * t3 * t16 * t21) +
                          l[0] * t21 * t29 * t46) +
                         t32 * t14 * t16 * 1000.0) -
                        q[1] * t7 * t14 * t16 * 1000.0) +
                       b_B_tmp * t30 * 1000.0) +
                      b_B_tmp * t60 * 1000.0) -
                     b_B_tmp * t165 * 1000.0) -
                    c_B_tmp * t5 * t21 * 1000.0) -
                   c_B_tmp * t6 * t21 * 1000.0) +
                  t58_tmp * t3 * t16 * t21 * 1000.0) +
                 t8 * t3 * t16) +
                t9 * t3 * t21) -
               t32 * t3 * t14 * t16 * 1000.0) -
              d4 * q[0] * q[1] * t3 * t21 * 1000.0) *
             -0.002 / t21;
  B[1] = t268;
  B[2] = t67;
  B[3] = t268;
  t90 = t58_tmp * q[2];
  B[4] = (rho[1] * rt_powd_snf(t35, 5.0) *
              (((((((t20 + t49 * 6.0E+6) - q[1] * t13 * 6.0E+9) +
                   t6 * t13 * 1.2E+10) -
                  t13 * t20 * 1.0E+9) -
                 t13 * t59 * 1.2E+10) -
                q[1] * t3 * t13 * 6.0E+9) +
               t49 * t64 * 6.0E+6) *
              -3.3333333333333332E-10 -
          d3 * t38 * (l[2] * 1000.0 - 1.0) *
              (((t3 * 2.0 - t18) + q[1] * t6 * 2.0) - 2.0) / 1000.0) +
         d1 * t36 * t39 *
             (((((((((((((l[2] * q[2] * t18 - t33 * t21) + l[1] * t6 * t21) +
                        t50_tmp * t46) -
                       t43 * t18 * 1000.0) +
                      t7 * t14 * t18 * 1000.0) -
                     t14 * t18 * t60 * 1000.0) +
                    t90 * t4 * 1000.0) -
                   t90 * t27 * 1000.0) -
                  t90 * t65 * 1000.0) +
                 t90 * t162 * 1000.0) -
                t58_tmp * t6 * t21 * 1000.0) +
               l[1] * q[2] * t46 * t60) -
              t58_tmp * q[1] * q[2] * t7 * 1000.0) *
             -0.002;
  B[5] = t260;
  B[6] = t67;
  B[7] = t260;
  B[8] = 1.0 / rt_powd_snf(q[2], 5.0) * rho[2] *
         (((((((t23 + t43 * 6.0E+6) - t66 * 6.0E+9) + t67_tmp * 1.2E+10) -
             t15 * t23 * 1.0E+9) -
            t15 * t60 * 1.2E+10) -
           q[2] * t4 * t15 * 6.0E+9) +
          t43 * t65 * 6.0E+6) *
         -3.3333333333333332E-10;
}

// End of code generation (B_fun.cpp)
